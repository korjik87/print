#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Runner –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ CUPS —Å—Ç–∞—Ç—É—Å–∞ (lpstat / lpq)
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ RabbitMQ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—á–µ—Ä–µ–¥–∏
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–º–æ–∫)
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
"""

import os
import sys
import json
import subprocess
import pika
import time
import traceback

from . import worker

# ============ CONFIG ============
PRINTER_NAME = os.getenv("DEFAULT_PRINTER", "Pantum_M7100DW_Series_9AF505_USB")
RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "localhost")
QUEUE_NAME = os.getenv("QUEUE_NAME", "print_queue")
TEST_FILE = "/tmp/test_runner.txt"
# ================================


def log(msg):
    print(f"üß© {msg}")


def check_cups_status(printer):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUPS –∏ —Å—Ç–∞—Ç—É—Å—ã"""
    log(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CUPS –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {printer}")
    try:
        res = subprocess.run(["lpstat", "-l", "-p", printer], capture_output=True, text=True, timeout=5)
        if res.returncode != 0:
            raise RuntimeError(res.stderr.strip())
        print(res.stdout)
        log("‚úÖ CUPS —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CUPS: {e}")
        return False
    return True


def check_rabbitmq_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ...")
    try:
        conn = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
        ch = conn.channel()
        ch.queue_declare(queue=QUEUE_NAME, durable=True)
        conn.close()
        log("‚úÖ RabbitMQ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—á–µ—Ä–µ–¥—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return True
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
        return False


def test_mocked_worker_behavior():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
    log("–¢–µ—Å—Ç 1Ô∏è‚É£ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–º–æ–∫).")

    def fake_status_error(printer):
        return {
            "online": True,
            "paper_out": True,
            "door_open": False,
            "raw_status": "media-empty-error"
        }

    worker.get_detailed_printer_status = fake_status_error

    job = {"printer": "Fake_Printer", "file": TEST_FILE, "retries": 0}
    mock_ch = type("MockCh", (), {
        "basic_ack": lambda self, **kw: print("ACK ‚úÖ"),
        "basic_nack": lambda self, **kw: print("NACK ‚ùå", kw),
        "basic_publish": lambda self, **kw: print("üì§ –ó–∞–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å", kw.get('body'))
    })()

    try:
        worker.handle_print_job(mock_ch, type("obj", (), {"delivery_tag": 1}), None, json.dumps(job).encode())
        log("‚úÖ –¢–µ—Å—Ç –º–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω ‚Äî –≤–æ—Ä–∫–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—à–∏–±–∫—É –ø—Ä–∏–Ω—Ç–µ—Ä–∞.")
    except Exception:
        traceback.print_exc()
        log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –º–æ–∫–æ–≤.")


def test_successful_job():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–µ—á–∞—Ç–∏"""
    log("–¢–µ—Å—Ç 2Ô∏è‚É£ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–µ—á–∞—Ç–∏ (—Ä–µ–∞–ª—å–Ω—ã–π CUPS).")
    try:
        # —Å–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        with open(TEST_FILE, "w") as f:
            f.write("Test Runner Print\n")

        # –ø—É–±–ª–∏–∫—É–µ–º –∑–∞–¥–∞—á—É –≤ RabbitMQ
        conn = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
        ch = conn.channel()
        ch.basic_publish(
            exchange='',
            routing_key=QUEUE_NAME,
            body=json.dumps({
                "printer": PRINTER_NAME,
                "file": TEST_FILE,
                "retries": 0
            }),
            properties=pika.BasicProperties(
                delivery_mode=2
            )
        )
        conn.close()
        log("üì® –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤–æ—Ä–∫–µ—Ä–∞.")
        log("‚öôÔ∏è –ï—Å–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å—Å—è.")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {e}")


def main():
    log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞\n")

    ok_cups = check_cups_status(PRINTER_NAME)
    ok_rabbit = check_rabbitmq_connection()

    if not ok_rabbit:
        log("üõë RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ—Å—Ç–∞–Ω–æ–≤ —Ç–µ—Å—Ç–∞.")
        sys.exit(1)

    test_mocked_worker_behavior()

    if ok_cups:
        test_successful_job()
    else:
        log("‚ö†Ô∏è CUPS –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–µ—á–∞—Ç–∏.")

    log("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    main()
