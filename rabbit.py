import pika
import json
import sys
import time
import traceback

from . import config
from .printer import print_file
from .callback import send_callback
from .utils import setup_logger, update_current_job_id

logger = setup_logger()

connection = None
channel = None

def process_task(task):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–µ—á–∞—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - True, –µ—Å–ª–∏ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
      - False, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ
    """
    result = print_file(task)

    if result["status"] == "success":
        send_callback(result)
        logger.info(f"[OK] –ó–∞–¥–∞—á–∞ {result['job_id']} —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–∞.")
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—á–∞—Ç–∏ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π job_id
        update_current_job_id({})
        return True
    else:
        logger.warning(f"[WAIT] –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result['error']}")
        return False

def callback(ch, method, properties, body):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ RabbitMQ.
    """
    global connection

    try:
        task = json.loads(body.decode())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏ ({e})")
        print("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏", e, file=sys.stderr)
        ch.basic_nack(delivery_tag=method.delivery_tag, requeue=False)
        return

    max_retries = 10
    retry_count = 0

    while retry_count < max_retries:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if connection is None or connection.is_closed:
                logger.warning("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏")
                # –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–Ω–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å
                return

            success = process_task(task)
            if success:
                ch.basic_ack(delivery_tag=method.delivery_tag)
                return
            else:
                retry_count += 1
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries} —á–µ—Ä–µ–∑ 15 —Å–µ–∫")

                # –ö–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                for i in range(30):  # 15 —Å–µ–∫ = 30 √ó 0.5 —Å–µ–∫
                    if connection is None or connection.is_closed:
                        logger.warning("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                        return
                    time.sleep(0.5)
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    if i % 10 == 0:  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                        try:
                            connection.process_data_events()
                        except:
                            logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                            return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}\n{traceback.format_exc()}")
            retry_count += 1

            # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            for i in range(20):  # 10 —Å–µ–∫ = 20 √ó 0.5 —Å–µ–∫
                if connection is None or connection.is_closed:
                    return
                time.sleep(0.5)
                if i % 10 == 0:
                    try:
                        connection.process_data_events()
                    except:
                        return

    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ - –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è –æ—Ç –∑–∞–¥–∞—á–∏
    try:
        ch.basic_nack(delivery_tag=method.delivery_tag, requeue=True)
    except:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å NACK - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")

def create_connection():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º heartbeat"""
    credentials = pika.PlainCredentials(
        username=config.RABBIT_USER,
        password=config.RABBIT_PASS
    )

    parameters = pika.ConnectionParameters(
        host=config.RABBIT_HOST,
        port=config.RABBIT_PORT,
        credentials=credentials,
        heartbeat=600,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 –º–∏–Ω—É—Ç
        blocked_connection_timeout=300,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connection_attempts=3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        retry_delay=5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    )

    return pika.BlockingConnection(parameters)

def start_rabbit():
    global connection, channel

    reconnect_delay = 5  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    max_reconnect_delay = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    while True:
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ...")
            connection = create_connection()
            channel = connection.channel()

            queue_name = f"print_tasks_printer_{config.PRINTER_ID}"
            channel.queue_declare(queue=queue_name, durable=True, exclusive=False, auto_delete=False)
            channel.basic_qos(prefetch_count=1)
            channel.basic_consume(queue=queue_name, on_message_callback=callback)

            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ. –û—á–µ—Ä–µ–¥—å: {queue_name}")
            logger.info(f"‚úÖ Heartbeat —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 600 —Å–µ–∫—É–Ω–¥")

            # –°–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            reconnect_delay = 5

            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            channel.start_consuming()

        except pika.exceptions.AMQPHeartbeatTimeout:
            logger.error("‚ùå Heartbeat timeout - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")

        except pika.exceptions.AMQPConnectionError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")

        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            if connection and connection.is_open:
                connection.close()
        except:
            pass

        logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥...")
        time.sleep(reconnect_delay)

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (exponential backoff)
        reconnect_delay = min(reconnect_delay * 2, max_reconnect_delay)
