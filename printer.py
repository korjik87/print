import subprocess
import tempfile
import os
import base64
import uuid
import time
import shutil
import re
import traceback

from . import config
from .utils import cleanup_file, get_detailed_printer_status, setup_logger, update_current_job_id

logger = setup_logger()

def print_raw(printer: str, tmp_path: str):
    cmd = ["nc", "-w1", printer, "9100"]
    with open(tmp_path, "rb") as f:
        result = subprocess.run(cmd, input=f.read(), capture_output=True)
    if result.returncode != 0:
        stderr = result.stderr.decode(errors="ignore").strip()
        cli = f"nc -w1 {printer} < {tmp_path}"
        raise Exception(f"–û—à–∏–±–∫–∞ RAW-–ø–µ—á–∞—Ç–∏: {stderr}, cmd: {cli}")

def wait_for_print_completion(printer_name: str, expected_job_id: str, timeout: int = 180):
    """
    –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–µ—á–∞—Ç–∏ –ø–æ job_id
    """
    logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏ –∑–∞–¥–∞–Ω–∏—è {expected_job_id}...")
    start_time = time.time()

    while time.time() - start_time < timeout:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            status = get_detailed_printer_status(printer_name)

            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –∏—Å—á–µ–∑–ª–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            if status["jobs_in_queue"] == 0:
                logger.info(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {expected_job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return True

            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –≤ –æ—á–µ—Ä–µ–¥–∏
            current_job_id = status.get("current_job_id")
            if current_job_id and str(current_job_id) != str(expected_job_id):
                logger.warning(f"‚ö†Ô∏è –í –æ—á–µ—Ä–µ–¥–∏ –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {current_job_id}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–µ

            logger.info(f"‚è≥ –ó–∞–¥–∞–Ω–∏–µ –µ—â–µ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è... (–æ—á–µ—Ä–µ–¥—å: {status['jobs_in_queue']})")
            time.sleep(5)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏: {e}")
            time.sleep(5)

    logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—á–∞—Ç–∏ –∑–∞–¥–∞–Ω–∏—è {expected_job_id}")
    return False

def print_cups(printer: str, tmp_path: str, job_id: str, timeout: int = 180):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ CUPS –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏.
    """
    result = {
        "job_id": job_id,
        "printer": config.PRINTER_ID,
        "status": "success",
        "error": None
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—á–∞—Ç—å
        lp_result = subprocess.run(
            ["lp", "-d", printer, "-o", "media=A4", tmp_path],
            capture_output=True,
            text=True
        )

        if lp_result.returncode != 0:
            raise Exception(f"–û—à–∏–±–∫–∞ CUPS: {lp_result.stderr.strip()}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π job_id CUPS
        match = re.search(r"request id is (\S+)", lp_result.stdout)
        cups_job_id = match.group(1) if match else None

        if cups_job_id:
            logger.info(f"üìã CUPS job ID: {cups_job_id}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å CUPS job ID")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏
        if not wait_for_print_completion(printer, cups_job_id or job_id, timeout):
            raise Exception("–ü–µ—á–∞—Ç—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")

        return result

    except Exception as e:
        result.update({
            "status": "error",
            "error": str(e)
        })
        return result

def check_printer_ready(printer: str, max_wait: int = 60):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –∫ –ø–µ—á–∞—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≥–æ—Ç–æ–≤, False –µ—Å–ª–∏ –Ω–µ—Ç.
    """
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ {printer}...")
    start_time = time.time()

    while time.time() - start_time < max_wait:
        try:
            status = get_detailed_printer_status(printer)

            if not status["online"]:
                logger.warning("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≤ —Å–µ—Ç–∏")
                return False

            if status["paper_out"]:
                logger.warning("–ù–µ—Ç –±—É–º–∞–≥–∏")
                return False

            if status["door_open"]:
                logger.warning("–û—Ç–∫—Ä—ã—Ç–∞ –∫—Ä—ã—à–∫–∞")
                return False

            # –ï—Å–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –≥–æ—Ç–æ–≤ –∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - –º–æ–∂–Ω–æ –ø–µ—á–∞—Ç–∞—Ç—å
            if status["can_print"] and status["jobs_in_queue"] == 0:
                logger.info("‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏")
                return True

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏, –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if status["jobs_in_queue"] > 0:
                current_job = status.get("current_job_id")
                logger.info(f"‚è≥ –ü—Ä–∏–Ω—Ç–µ—Ä –∑–∞–Ω—è—Ç –∑–∞–¥–∞–Ω–∏–µ–º {current_job}, –∂–¥–µ–º...")
                time.sleep(5)
                continue

            time.sleep(2)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {e}")
            time.sleep(5)

    logger.error("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    return False

def print_file(task: dict):
    printer = config.PRINTER
    filename = task.get("filename", f"job_{uuid.uuid4().hex}.pdf")
    content_b64 = task.get("content")
    job_id = task.get("job_id", str(uuid.uuid4()))
    tmp_path = os.path.join(tempfile.gettempdir(), filename)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π job_id –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—á–∞—Ç–∏
    update_current_job_id(task)

    # –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    response = {
        "job_id": job_id,
        "printer": printer,
        "status": "success"
    }

    if not content_b64:
        response.update({
            "status": "error",
            "error": "–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø–µ—á–∞—Ç–∏"
        })
        return response

    try:
        if config.DISABLE_PRINT:
            logger.info("–ü–µ—á–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)")
            response["log_status"] = "debug"
            return response

        logger.info(f"üñ®Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞–Ω–∏—è {job_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        if not check_printer_ready(printer):
            response.update({
                "status": "error",
                "error": "–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏"
            })
            return response

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(tmp_path, "wb") as f:
            f.write(base64.b64decode(content_b64))
        logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {tmp_path}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—á–∞—Ç—å
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ {job_id} –Ω–∞ –ø–µ—á–∞—Ç—å...")
        print_result = print_cups(printer, tmp_path, job_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response.update(print_result)

        if response["status"] == "success":
            logger.info(f"üéâ –ó–∞–¥–∞–Ω–∏–µ {job_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω–æ")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –∑–∞–¥–∞–Ω–∏—è {job_id}: {response['error']}")

        return response

    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(f"‚ùå {error_msg}\n{traceback.format_exc()}")
        response.update({
            "status": "error",
            "error": error_msg
        })
        return response
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π job_id –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏
        update_current_job_id({})
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        cleanup_file(tmp_path)
