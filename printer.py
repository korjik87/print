import subprocess
import tempfile
import os
import base64
import uuid
import time
import shutil
import re
import time

from . import config
from .utils import cleanup_file, get_detailed_printer_status, setup_logger

logger = setup_logger()

def print_raw(printer: str, tmp_path: str):
    cmd = ["nc", "-w1", printer, "9100"]
    with open(tmp_path, "rb") as f:
        result = subprocess.run(cmd, input=f.read(), capture_output=True)
    if result.returncode != 0:
        stderr = result.stderr.decode(errors="ignore").strip()
        cli = f"nc -w1 {printer} < {tmp_path}"
        raise Exception(f"–û—à–∏–±–∫–∞ RAW-–ø–µ—á–∞—Ç–∏: {stderr}, cmd: {cli}")


def wait_until_ready(printer_name: str, max_wait: int = 300, interval: int = 10):
    """
    –ñ–¥—ë–º, –ø–æ–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤, –∏–Ω–∞—á–µ False –ø–æ —Ç–∞–π–º–∞—É—Ç—É.
    """
    start_time = time.time()
    while time.time() - start_time < max_wait:
        status = get_detailed_printer_status(printer_name)
        if (
            status["online"]
            and not status["paper_out"]
            and not status["door_open"]
            and status["jobs_in_queue"] == 0
        ):
            return True
        logger.info(f"‚è≥ –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥—ë–º... ({status['raw_status'][:80]}...)")
        time.sleep(interval)
    return False


def print_cups(printer: str, tmp_path: str, timeout: int = 180):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ CUPS.
    –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî exit-–∫–æ–¥ lp.
    –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ lpstat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–æ–≤.
    """
    result = subprocess.run(
        ["lp", "-d", printer, "-o", "media=A4", tmp_path],
        capture_output=True,
        text=True
    )
    if result.returncode != 0:
        raise Exception(f"–û—à–∏–±–∫–∞ CUPS: {result.stderr.strip()}")

    match = re.search(r"request id is (\S+)", result.stdout)
    job_id = match.group(1) if match else None

    start = time.time()
    while time.time() - start < timeout:
        status = subprocess.run(["lpstat", "-W", "not-completed", "-o", printer],
                                capture_output=True, text=True)
        if job_id not in status.stdout:
            return {"job_id": job_id, "status": "success"}
        time.sleep(2)

    raise Exception("–ü–µ—á–∞—Ç—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")


def print_file(task: dict):
    printer = config.PRINTER
    filename = task.get("filename", f"job_{uuid.uuid4().hex}.pdf")
    content_b64 = task.get("content")
    job_id = task.get("job_id", str(uuid.uuid4()))

    if not content_b64:
        return {"status": "error", "error": "–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"}

    try:
        if config.DISABLE_PRINT:
            logger.info("–ü–µ—á–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)")
            return {"status": "success", "job_id": job_id, "log_status": "debug"}




        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        status = get_detailed_printer_status(printer)
        if not status["online"]:
            raise Exception("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≤ —Å–µ—Ç–∏")
        if status["jobs_in_queue"] > 0:
            raise Exception("–û—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏ –Ω–µ –ø—É—Å—Ç–∞")
        if status["paper_out"]:
            raise Exception("–ù–µ—Ç –±—É–º–∞–≥–∏")
        if status["door_open"]:
            raise Exception("–û—Ç–∫—Ä—ã—Ç–∞ –∫—Ä—ã—à–∫–∞")


        tmp_path = os.path.join(tempfile.gettempdir(), filename)
        with open(tmp_path, "wb") as f:
            f.write(base64.b64decode(content_b64))


        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–µ—á–∞—Ç—å
        logger.info(f"üñ®Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É {job_id} –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä {printer}...")
        result = print_cups(printer, tmp_path)
        result.update({"status": "success"})
        return result

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏: {e}")
        return {"status": "error", "error": str(e), "printer_status": status}
    finally:
        if os.path.isfile(tmp_path):
            cleanup_file(tmp_path)
